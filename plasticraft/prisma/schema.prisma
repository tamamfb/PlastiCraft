// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  name     String
  foto     String?   // nullable (varchar?)

  creations Creation[]
  comments  Comment[]
  likes     Like[]
  
  // Following relationships
  following Follow[] @relation("UserFollowing")
  followers Follow[] @relation("UserFollowers")
}

model Creation {
  id                Int       @id @default(autoincrement())
  userId            Int
  categoryProdukId  Int
  categoryBahanId   Int
  gambar            String
  judul             String
  deskripsi         String
  langkah           String?
  video             String?
  tanggal           DateTime  @default(now())

  user              User       @relation(fields: [userId], references: [id])
  categoryProduk    CategoryProduk @relation(fields: [categoryProdukId], references: [id])
  categoryBahan     CategoryBahan  @relation(fields: [categoryBahanId], references: [id])
  comments          Comment[]
  likes             Like[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  userId      Int
  creationId  Int
  komen       String
  tanggal     DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  creation    Creation @relation(fields: [creationId], references: [id])
}

// Model untuk sistem Like
model Like {
  id          Int      @id @default(autoincrement())
  userId      Int
  creationId  Int
  tanggal     DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  creation    Creation @relation(fields: [creationId], references: [id])

  // Composite unique index untuk mencegah user like postingan yang sama 2x
  @@unique([userId, creationId])
}

// Model untuk sistem Follow
model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int      // User yang melakukan follow
  followingId Int      // User yang di-follow
  tanggal     DateTime @default(now())

  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])

  // Composite unique index untuk mencegah user follow user yang sama 2x
  @@unique([followerId, followingId])
}

model CategoryProduk {
  id      Int        @id @default(autoincrement())
  nama    String

  creations Creation[]
}

model CategoryBahan {
  id      Int        @id @default(autoincrement())
  nama    String

  creations Creation[]
}